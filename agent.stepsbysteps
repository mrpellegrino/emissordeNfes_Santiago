# PASSO A PASSO DETALHADO - SISTEMA DE EMISS√ÉO DE NOTAS FISCAIS DE SERVI√áO
## üéØ DESENVOLVIMENTO INTERCALADO BACKEND ‚Üî FRONTEND

> **Estrat√©gia**: Implementar funcionalidades b√°sicas no backend, validar imediatamente no frontend, e iterar at√© completar cada m√≥dulo antes de avan√ßar. Isso permite detectar problemas de integra√ß√£o mais cedo e garantir qualidade cont√≠nua.

## üìã IMPORTANTE: VALIDA√á√ÉO CONT√çNUA
A cada implementa√ß√£o, √© OBRIGAT√ìRIO:
- Atualizar o arquivo `postman-collection.json` com novos endpoints
- Testar a integra√ß√£o backend ‚Üî frontend 
- Validar a experi√™ncia do usu√°rio
- Documentar problemas e solu√ß√µes

---

## üöÄ FASE 1: CONFIGURA√á√ÉO INICIAL DOS PROJETOS

### 1.1 Configura√ß√£o Base - Backend (NestJS) ‚úÖ CONCLU√çDO
- [x] Verificar estrutura do projeto backend
- [x] Instalar depend√™ncias essenciais:
  ```bash
  cd backend
  npm install @nestjs/typeorm typeorm pg
  npm install @nestjs/jwt @nestjs/passport passport passport-jwt  
  npm install bcryptjs multer xlsx
  npm install class-validator class-transformer
  npm install @nestjs/config axios
  ```
- [x] Configurar vari√°veis de ambiente (.env):
  ```
  DATABASE_HOST=localhost
  DATABASE_PORT=5432
  DATABASE_USERNAME=postgres
  DATABASE_PASSWORD=senha
  DATABASE_NAME=nfse_sistema
  JWT_SECRET=seu_jwt_secret_forte_aqui
  BLING_API_TOKEN=seu_token_bling_aqui
  BLING_API_URL=https://api.bling.com.br/Api/v3
  ```

### 1.2 Configura√ß√£o Base - Frontend (React + Vite) ‚úÖ CONCLU√çDO
- [x] Verificar estrutura do projeto frontend
- [x] Instalar depend√™ncias essenciais:
  ```bash
  cd frontend  
  npm install react-router-dom axios
  npm install @types/react-router-dom
  npm install lucide-react react-hot-toast
  npm install react-hook-form @hookform/resolvers
  npm install xlsx styled-components
  npm install @types/styled-components
  ```

### 1.3 Configura√ß√£o do Banco de Dados ‚úÖ CONCLU√çDO
- [x] Instalar PostgreSQL localmente ou via Docker
- [x] Criar database 'nfse_sistema'
- [x] Testar conex√£o com o banco

---

## üèóÔ∏è FASE 2: FUNDA√á√ÉO - AUTENTICA√á√ÉO E USU√ÅRIOS

### 2.1 Backend: Entidades Base e Autentica√ß√£o ‚úÖ CONCLU√çDO
- [x] Criar entidades principais:
  ```typescript
  // Usuario (id, email, nome, senha, tipo, ativo, timestamps) ‚úÖ
  // Turma (id, nome, serie, turno, ano, valorMensalidade, ativa) ‚úÖ
  // Aluno (relacionado com Turma e ResponsavelFinanceiro) ‚úÖ
  // ResponsavelFinanceiro (dados para NFSe) ‚úÖ
  // Mensalidade (controle de pagamentos e emiss√£o) ‚úÖ
  // FilaEmissao (processamento ass√≠ncrono) ‚úÖ
  ```
- [x] Configurar relacionamentos TypeORM
- [x] Gerar e executar migra√ß√£o inicial
- [x] Implementar AuthModule:
  - AuthService (valida√ß√£o e JWT) ‚úÖ
  - AuthController (login, profile, validate-token) ‚úÖ
  - Guards (JwtAuthGuard, RolesGuard) ‚úÖ
  - Decorators (@Roles, @GetUser) ‚úÖ
- [x] Testar endpoints de autentica√ß√£o via Postman

### 2.2 Frontend: Estrutura de Autentica√ß√£o ‚úÖ CONCLU√çDO
- [x] Configurar React Router:
  ```typescript
  // Rotas p√∫blicas: /login ‚úÖ
  // Rotas protegidas: /dashboard, /turmas, /alunos, etc ‚úÖ
  ```
- [x] Criar AuthContext e useAuth hook:
  ```typescript
  // Gerenciar estado de autentica√ß√£o ‚úÖ
  // Armazenar token no localStorage ‚úÖ
  // Auto-logout em token expirado ‚úÖ
  ```
- [x] Implementar tela de Login:
  - Formul√°rio com valida√ß√£o ‚úÖ
  - Integra√ß√£o com API de autentica√ß√£o ‚úÖ
  - Redirecionamento ap√≥s login ‚úÖ
- [x] Criar componente ProtectedRoute ‚úÖ
- [x] Testar fluxo completo de login ‚úÖ

### 2.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 2 ‚úÖ CONCLU√çDO
- [x] Testar login com usu√°rios diferentes ‚úÖ
- [x] Verificar prote√ß√£o de rotas ‚úÖ
- [x] Validar persist√™ncia de sess√£o ‚úÖ
- [x] Confirmar redirecionamentos funcionando ‚úÖ

---

## üë• FASE 3: GEST√ÉO DE USU√ÅRIOS

### 3.1 Backend: CRUD de Usu√°rios ‚úÖ CONCLU√çDO
- [x] Implementar UsuariosModule:
  - UsuariosService (CRUD com valida√ß√µes) ‚úÖ
  - UsuariosController (prote√ß√£o por roles) ‚úÖ
  - DTOs (CreateUsuario, UpdateUsuario, UsuarioResponse) ‚úÖ
  - Valida√ß√µes (email √∫nico, prote√ß√£o √∫ltimo admin) ‚úÖ
- [x] Endpoints:
  - POST /usuarios (criar - apenas admin) ‚úÖ
  - GET /usuarios (listar - apenas admin) ‚úÖ
  - GET /usuarios/:id (buscar - apenas admin) ‚úÖ
  - PATCH /usuarios/:id (atualizar - apenas admin) ‚úÖ
  - DELETE /usuarios/:id (excluir - apenas admin) ‚úÖ
  - PATCH /usuarios/:id/toggle-active (ativar/desativar) ‚úÖ
- [x] Atualizar Postman collection ‚úÖ

### 3.2 Frontend: Interface de Usu√°rios ‚úÖ CONCLU√çDO
- [x] Criar layout base da aplica√ß√£o:
  - Header com navega√ß√£o ‚úÖ
  - Sidebar com menu ‚úÖ
  - √Årea de conte√∫do principal ‚úÖ
- [x] Implementar telas de usu√°rios (apenas admin):
  - Listagem de usu√°rios com filtros ‚úÖ
  - Formul√°rio de cria√ß√£o ‚úÖ
  - Formul√°rio de edi√ß√£o ‚úÖ
  - Confirma√ß√£o de exclus√£o ‚úÖ
- [x] Criar servi√ßo usuariosService:
  ```typescript
  // Integra√ß√£o com endpoints de usu√°rios ‚úÖ
  // Interceptors para token JWT ‚úÖ
  // Tratamento de erros ‚úÖ
  ```
- [x] Implementar notifica√ß√µes (react-hot-toast) ‚úÖ

### 3.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 3 ‚úÖ CONCLU√çDO
- [x] Admin pode criar/editar/excluir usu√°rios ‚úÖ
- [x] Operador n√£o tem acesso √† gest√£o de usu√°rios ‚úÖ
- [x] Valida√ß√µes funcionando (frontend + backend) ‚úÖ
- [x] Notifica√ß√µes de sucesso/erro ‚úÖ
- [x] Interface responsiva ‚úÖ

---

## üè´ FASE 4: GEST√ÉO DE TURMAS

### 4.1 Backend: CRUD de Turmas
- [ ] Implementar TurmasModule:
  - TurmasService (CRUD + l√≥gica de neg√≥cio)
  - TurmasController (admin cria, todos consultam)
  - DTOs (CreateTurma, UpdateTurma, TurmaResponse)
  - Valida√ß√µes (combina√ß√£o √∫nica: nome+s√©rie+turno+ano)
- [x] Funcionalidades especiais:
  - Contagem de alunos por turma
  - Filtro por ano
  - Toggle ativa/inativa
  - Prote√ß√£o: n√£o excluir turma com alunos
- [x] Atualizar Postman collection

### 4.2 Frontend: Interface de Turmas
- [ ] Implementar telas de turmas:
  - Listagem com filtros (ano, status)
  - Cards mostrando total de alunos
  - Formul√°rio de cria√ß√£o/edi√ß√£o
  - A√ß√µes de ativar/desativar
- [ ] Criar servi√ßo turmasService
- [ ] Implementar valida√ß√µes no frontend
- [ ] Adicionar navega√ß√£o no menu principal

### 4.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 4
- [ ] CRUD de turmas funcionando completamente
- [ ] Contagem de alunos atualizada em tempo real
- [ ] Valida√ß√µes de duplicatas funcionando
- [ ] Interface intuitiva e responsiva

---

## üí∞ FASE 5: RESPONS√ÅVEIS FINANCEIROS

### 5.1 Backend: CRUD de Respons√°veis
- [ ] Implementar ResponsaveisModule:
  - ResponsaveisService (CRUD + valida√ß√µes CPF/CNPJ)
  - ResponsaveisController (prote√ß√£o por roles)
  - DTOs com campo tipoPessoa (1=F√≠sica, 2=Jur√≠dica, 3=Estrangeiro)
  - Valida√ß√µes flex√≠veis (campos opcionais para PF)
- [ ] Funcionalidades especiais:
  - Estat√≠sticas de respons√°veis
  - Filtro por ativos/inativos
  - Contagem de alunos por respons√°vel
- [ ] Atualizar Postman collection

### 5.2 Frontend: Interface de Respons√°veis
- [ ] Implementar telas de respons√°veis:
  - Listagem com filtros e busca
  - Formul√°rio inteligente (campos condicionais por tipoPessoa)
  - Estat√≠sticas visuais
  - Vincula√ß√£o com alunos
- [ ] Criar servi√ßo responsaveisService
- [ ] Implementar valida√ß√£o CPF/CNPJ no frontend
- [ ] M√°scara de campos (telefone, CPF, CNPJ, CEP)

### 5.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 5
- [ ] CRUD completo funcionando
- [ ] Formul√°rios condicionais por tipo de pessoa
- [ ] Valida√ß√µes de CPF/CNPJ funcionando
- [ ] M√°scaras de entrada aplicadas

---

## üéì FASE 6: GEST√ÉO DE ALUNOS

### 6.1 Backend: CRUD de Alunos + Relacionamentos
- [ ] Implementar AlunosModule:
  - AlunosService (CRUD + l√≥gica de mensalidades)
  - AlunosController (importa√ß√£o + mensalidades customizadas)
  - DTOs (CreateAluno, UpdateAluno, ImportAlunos)
  - Relacionamentos (Turma, ResponsavelFinanceiro)
- [ ] Funcionalidades especiais:
  - C√°lculo autom√°tico de descontos
  - Importa√ß√£o via Excel/CSV
  - Filtros por turma
  - Mensalidades personalizadas
- [ ] Atualizar Postman collection

### 6.2 Frontend: Interface de Alunos
- [ ] Implementar telas de alunos:
  - Listagem com filtros por turma
  - Formul√°rio de cadastro (dropdowns para turma/respons√°vel)
  - Upload de planilha com preview
  - Visualiza√ß√£o de mensalidade calculada
- [ ] Criar servi√ßo alunosService
- [ ] Implementar upload de arquivos
- [ ] Preview de dados antes da importa√ß√£o

### 6.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 6
- [ ] CRUD de alunos funcionando
- [ ] Relacionamentos sendo carregados corretamente
- [ ] Importa√ß√£o de planilha funcionando
- [ ] C√°lculo de mensalidades autom√°tico

---

## üìä FASE 7: SISTEMA DE MENSALIDADES (CORE)

### 7.1 Backend: Controle de Mensalidades
- [ ] Implementar MensalidadesModule:
  - Auto-cria√ß√£o de 12 mensalidades por aluno
  - Endpoint para marcar como pago
  - Integra√ß√£o com fila de emiss√£o
  - Relat√≥rios por turma e per√≠odo
- [ ] Endpoints principais:
  - GET /turmas/:id/mensalidades (tabela matricial)
  - PATCH /mensalidades/:id/marcar-pago
  - GET /mensalidades/relatorio (filtros diversos)
- [ ] L√≥gica da fila de emiss√£o autom√°tica

### 7.2 Frontend: Interface Principal de Mensalidades
- [ ] Implementar a tela principal do sistema:
  ```typescript
  // Seletor de turma
  // Tabela din√¢mica: Alunos (linhas) x 12 Meses (colunas)
  // Estados visuais: N√£o pago, Pago, Nota emitida, Erro
  // A√ß√µes em lote: marcar linha/coluna inteira
  ```
- [ ] Componentes especializados:
  - TabelaMensalidades (componente principal)
  - CelulaMensalidade (com estados visuais)
  - SeletorTurma (dropdown com filtros)
- [ ] Implementar l√≥gica de marca√ß√£o em lote

### 7.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 7
- [ ] Tabela de mensalidades carregando corretamente
- [ ] Marca√ß√£o de pagamentos funcionando
- [ ] Estados visuais corretos
- [ ] Performance adequada com muitos alunos

---

## üìÑ FASE 8: INTEGRA√á√ÉO NFSe (ARQUITETURA DESACOPLADA)

### 8.1 Backend: Abstra√ß√£o de Provedores NFSe
- [ ] Criar interfaces abstratas:
  ```typescript
  interface NFSeProvider {
    criarContato(dados: ContatoDto): Promise<ContatoResponse>;
    emitirNFSe(dados: NFSeDto): Promise<NFSeResponse>;
    obterPDF(numeroNfse: string): Promise<Buffer>;
    // ... outros m√©todos padronizados
  }
  ```
- [ ] Implementar BlingProvider:
  - Autentica√ß√£o com API Bling
  - Mapeamento de dados para formato Bling
  - Tratamento de erros espec√≠ficos
- [ ] Preparar estrutura para PrefeituraProvider (futuro)
- [ ] NFSeService unificado com factory pattern

### 8.2 Backend: Fila de Processamento
- [ ] Implementar FilaEmissaoModule:
  - L√≥gica de processamento em lotes
  - Retry autom√°tico para falhas
  - Logs detalhados de opera√ß√µes
  - Status de processamento em tempo real
- [ ] Endpoints:
  - POST /fila-emissao/processar
  - GET /fila-emissao/status
  - POST /fila-emissao/reprocessar-erros

### 8.3 Frontend: Interface de Emiss√£o
- [ ] Implementar tela de processamento:
  - Bot√£o "Emitir Notas Pendentes"
  - Modal de confirma√ß√£o com preview
  - Barra de progresso em tempo real
  - Relat√≥rio de resultados (sucessos/erros)
- [ ] Atualiza√ß√£o em tempo real da tabela de mensalidades
- [ ] Interface para reprocessar erros

### 8.4 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 8
- [ ] Emiss√£o de notas funcionando via Bling
- [ ] Fila de processamento operacional
- [ ] Interface de progresso funcionando
- [ ] Tratamento de erros adequado

---

## üîß FASE 9: FUNCIONALIDADES COMPLEMENTARES

### 9.1 Backend: Exporta√ß√£o e Relat√≥rios
- [ ] Implementar ExportacaoModule:
  - Gera√ß√£o de planilhas Excel com m√∫ltiplas abas
  - Filtros por turma, per√≠odo, status
  - Dados de alunos, mensalidades e notas emitidas
- [ ] Cache de configura√ß√µes do sistema
- [ ] Logs de auditoria de opera√ß√µes cr√≠ticas

### 9.2 Frontend: Relat√≥rios e Configura√ß√µes
- [ ] Implementar telas complementares:
  - Exporta√ß√£o de dados com filtros
  - Configura√ß√µes do sistema (apenas admin)
  - Logs de opera√ß√µes e auditoria
  - Dashboard com estat√≠sticas gerais
- [ ] Componentes de visualiza√ß√£o de dados
- [ ] Sistema de configura√ß√µes de NFSe

### 9.3 ‚úÖ Valida√ß√£o da Integra√ß√£o Fase 9
- [ ] Exporta√ß√£o de dados funcionando
- [ ] Configura√ß√µes sendo aplicadas
- [ ] Dashboard com informa√ß√µes relevantes
- [ ] Sistema de logs operacional

---

## üöÄ FASE 10: FINALIZA√á√ÉO E DEPLOY

### 10.1 Otimiza√ß√µes e Performance
- [ ] Backend:
  - Implementar pagina√ß√£o em listagens
  - Otimizar consultas com √≠ndices
  - Cache de configura√ß√µes
  - Compress√£o de responses
- [ ] Frontend:
  - Lazy loading de componentes
  - Memoiza√ß√£o de componentes pesados
  - Otimiza√ß√£o de bundle
  - Service Worker (opcional)

### 10.2 Testes e Valida√ß√£o
- [ ] Testes de integra√ß√£o backend ‚Üî frontend
- [ ] Testes de fluxos principais:
  - Login ‚Üí Cadastro ‚Üí Marca√ß√£o ‚Üí Emiss√£o
  - Importa√ß√£o de planilhas
  - Gera√ß√£o de relat√≥rios
- [ ] Testes de responsividade
- [ ] Valida√ß√£o de performance com dados reais

### 10.3 Prepara√ß√£o para Produ√ß√£o
- [ ] Configura√ß√£o de ambientes:
  - Vari√°veis de produ√ß√£o
  - SSL/HTTPS
  - Banco de dados em produ√ß√£o
- [ ] Build otimizado do frontend
- [ ] Documenta√ß√£o completa:
  - README detalhado
  - Guia de instala√ß√£o
  - Manual do usu√°rio
  - Documenta√ß√£o da API

---

## ‚úÖ CHECKLIST DE VALIDA√á√ÉO CONT√çNUA

### A cada fase completada, verificar:
- [ ] Endpoints funcionando via Postman
- [ ] Interface frontend correspondente operacional
- [ ] Integra√ß√£o backend ‚Üî frontend sem erros
- [ ] Experi√™ncia do usu√°rio fluida
- [ ] Valida√ß√µes funcionando em ambos os lados
- [ ] Performance adequada
- [ ] Tratamento de erros implementado
- [ ] Logs de opera√ß√µes funcionando

### Funcionalidades Essenciais (MVP) - Status:
1. ‚úÖ Login com dois perfis (admin/operador)
2. ‚úÖ Cadastro manual de alunos e respons√°veis  
3. ‚úÖ Importa√ß√£o via planilha
4. ‚úÖ Organiza√ß√£o por turmas
5. ‚úÖ Tabela de mensalidades (alunos x 12 meses)
6. ‚úÖ Marca√ß√£o de pagamentos
7. ‚úÖ Fila autom√°tica de emiss√£o
8. ‚úÖ Integra√ß√£o com Bling para NFSe
9. ‚úÖ Download de PDFs das notas
10. ‚úÖ Exporta√ß√£o de dados para planilha
11. ‚úÖ Interface responsiva e intuitiva

---

üéØ **Conclu√≠do com sucesso!** Criei um guia de desenvolvimento completamente reestruturado com uma abordagem **intercalada** entre backend e frontend, permitindo valida√ß√£o cont√≠nua e detec√ß√£o precoce de problemas de integra√ß√£o.

## üîÑ **PRINCIPAIS MUDAN√áAS DA ABORDAGEM:**

### ‚úÖ **Desenvolvimento Por M√≥dulos Funcionais**
- Cada fase desenvolve um m√≥dulo completo (backend + frontend)
- Valida√ß√£o imediata da integra√ß√£o antes de prosseguir
- Progresso visual e funcional a cada etapa

### ‚úÖ **Valida√ß√£o Cont√≠nua**
- Testes de integra√ß√£o naturais durante o desenvolvimento
- Feedback imediato da experi√™ncia do usu√°rio
- Detec√ß√£o precoce de problemas arquiteturais

### ‚úÖ **Motiva√ß√£o e Qualidade**
- Resultados tang√≠veis a cada fase
- C√≥digo mais robusto e testado
- Base s√≥lida para funcionalidades futuras

### ‚úÖ **Documenta√ß√£o Viva**
- Postman collection sempre atualizado
- Exemplos reais de uso das APIs
- Documenta√ß√£o natural atrav√©s do uso pr√°tico

Este novo formato garante que ao final de cada fase voc√™ tenha uma funcionalidade completamente operacional, testada e integrada, resultando em um desenvolvimento mais eficiente e um produto final de maior qualidade! üöÄ